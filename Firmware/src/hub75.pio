
; ********************************************************************************************
;
.program hub75_row
.side_set 1

.wrap_target
    out pins, 5     side 0 [2] ; < ---- Stall point
    nop             side 1 [4] ; Pulse LATCH
    nop             side 0 [2] ;
.wrap

; ********************************************************************************************
;
% c-sdk {
static inline void hub75_row_program_init(
    PIO pio, 
    uint sm, 
    uint offset, 
    uint row_base_pin, 
    uint n_row_pins, 
    uint latch_base_pin, 
    float clk_div
    ) {
    pio_sm_set_consecutive_pindirs(pio, sm, row_base_pin, n_row_pins, true);
    pio_sm_set_consecutive_pindirs(pio, sm, latch_base_pin, 1, true);
    for (uint i = row_base_pin; i < row_base_pin + n_row_pins; ++i)
        pio_gpio_init(pio, i);
        
    pio_gpio_init(pio, latch_base_pin);

    pio_sm_config c = hub75_row_program_get_default_config(offset);
    sm_config_set_out_pins(&c, row_base_pin, n_row_pins);
    sm_config_set_sideset_pins(&c, latch_base_pin);
    sm_config_set_out_shift(&c, true, true, n_row_pins);
    sm_config_set_clkdiv(&c, clk_div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

; ********************************************************************************************
;
.program hub75_dimming
.side_set 1
.wrap_target
    out y, 16       side 1 ; x = on time  
    out x, 16       side 1 ; y = off time
    
on_loop:
    jmp x-- on_loop side 0

off_loop:
    jmp y-- off_loop side 1

.wrap

; ********************************************************************************************
;

% c-sdk {
static inline void hub75_dimming_program_init(
    PIO pio, 
    uint sm, 
    uint offset, 
    uint oe_pin,
    float clk_div
    ) {
    pio_sm_set_consecutive_pindirs(pio, sm, oe_pin, 1, true);
    pio_gpio_init(pio, oe_pin);

    pio_sm_config c = hub75_dimming_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, oe_pin);

    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_clkdiv(&c, clk_div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

; ********************************************************************************************
;
.program hub75_rgb_data
.side_set 1 
; Just serialise a stream of bits. Take 32 bits from each FIFO record. LSB-first.

.wrap_target
    out pins, 6  side 0 ; Pixel 2   one pixel for channel 1 and one pixel for channel 2
    out null, 2  side 1 ; blank 2 bits
.wrap

% c-sdk {
static inline void hub75_rgb_data_program_init(PIO pio, 
                uint sm, 
                uint offset, 
                uint data_pin,
                uint pin_clk, 
                float clk_div) 
{
    pio_gpio_init(pio, data_pin+0); // Upper half of screen
    pio_gpio_init(pio, data_pin+1);
    pio_gpio_init(pio, data_pin+2);

    pio_gpio_init(pio, data_pin+3); // Lower half of screen
    pio_gpio_init(pio, data_pin+4);
    pio_gpio_init(pio, data_pin+5);

    pio_gpio_init(pio, pin_clk);  // Sideset pin

    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 6, true);

    pio_sm_config c = hub75_rgb_data_program_get_default_config(offset);
    
    //sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_out_shift(&c, true, true, 8);
    sm_config_set_out_pins(&c, data_pin, 6);

    pio_sm_set_consecutive_pindirs(pio, sm, pin_clk, 1, true);

    // Side set clock pin
    //sm_config_set_sideset(&c,1,false,false);
    sm_config_set_sideset_pins(&c, pin_clk);

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, clk_div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

; ********************************************************************************************
;
; Wait until the PIO SM has stalled 
;

% c-sdk {
static inline void hub75_wait_stall(PIO pio, uint sm) 
{
    uint32_t txstall_mask = 1u << (PIO_FDEBUG_TXSTALL_LSB + sm);
    pio->fdebug = txstall_mask;
    while (!(pio->fdebug & txstall_mask))
        tight_loop_contents();
}
%}